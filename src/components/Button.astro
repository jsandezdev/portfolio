---
export interface Props {
    variant: 'primary' | 'light';
    size?: 'sm' | 'md' | 'lg';
    class?: string;
    element?: 'anchor' | 'button';
    href?: string;
    type?: 'button' | 'submit' | 'reset';
    download?: string;
    onclick?: any;
}

const { variant, size = 'md', element = 'button', href = '#', type, download, onclick } = Astro.props

const colors = {
    primary: 'bg-gradient-to-r from-jscyan to-jspink hover:from-jspink hover:to-jscyan text-jswhite',
    light: 'text-jswhite hover:text-jspurple-dark hover:bg-jswhite border '
}

const color = colors[variant] || colors.light

const sizes = {
    sm: 'py-2 px-6 text-sm',
    md: 'py-4 px-10 text-md md:py-3 md:px-9 md:text-lg lg:py-4 lg:px-14 lg:text-xl xl:py-5 xl:px-16 xl:text-2xl',
    lg: 'py-4 px-16 text-xl'
}

const padding = sizes[size] || sizes.md

const classes = `${Astro.props.class || ''} ${color} ${padding} rounded-full transition-all duration-300 font-bold block w-full text-center sm:w-auto sm:inline-block tracking-wider`
---

{ element === 'button' && (
    <button
        type={type}
        onclick={onclick}
        class={classes}
    >
        <slot/>
    </button>
)}

{ element === 'anchor' && (
    <a
        href={href}
        download={download}
        class={classes}
    >
        <slot/>
    </a>
)}
